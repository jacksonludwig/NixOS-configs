#+title: Init.el Generator
#+property: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
#+startup: overview

* Core settings
Basic settings
#+begin_src emacs-lisp
(setq user-full-name "Jackson Ludwig"
      user-mail-address "jacksonludwig0@gmail.com")

;; Send backup files to tmp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; SAVE CUSTOM VARS TO SEPARATE FILE
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file 'noerror)

;; (setq gc-cons-threshold (* 50 1024 1024)) ;; use this if not trying GCMH
(setq read-process-output-max (* 1024 1024)) ;; 1mb
(setq create-lockfiles nil)

;; Hide native comp warnings/errors. Risky?
;; (setq native-comp-async-report-warnings-errors nil)

;; (load-theme 'modus-operandi)
#+end_src
* Sane UI Defaults
#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(setq visible-bell t)
#+end_src
* Default settings and modes
#+begin_src emacs-lisp
(electric-pair-mode +1)
(show-paren-mode +1)
(setq js-indent-level 2)
#+end_src
* Font
This is the simplest font setup.
#+begin_src emacs-lisp
(defvar jackson/default-font-size 128)
;;(defvar jackson/main-font "Jetbrains Mono")
;;(defvar jackson/default-font-size 138)
;;(defvar jackson/main-font "Iosevka")
;;(defvar jackson/main-font "DejaVu Sans Mono")
;;(defvar jackson/main-font "Meslo LG S")
;;(defvar jackson/main-font "Source Code Pro")
;;(defvar jackson/variable-font "DejaVu Sans")

;;(set-face-attribute 'default nil :family jackson/main-font :height jackson/default-font-size)

;; Set the fixed pitch face
;;(set-face-attribute 'fixed-pitch nil :family jackson/main-font :height 1.0)

;; Set the variable pitch face
;;(set-face-attribute 'variable-pitch nil :family jackson/variable-font :height 1.0)
(set-frame-font "DejaVu Sans Mono 13" nil t)
#+end_src
* Package bootstrap
#+begin_src emacs-lisp
(setq straight-repository-branch "develop")
(setq straight-use-package-by-default t)
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)
#+end_src
* Core Packages
** Diminish
#+begin_src emacs-lisp
(use-package diminish)
#+end_src
** GCMH
#+begin_src emacs-lisp
(use-package gcmh
  :diminish gcmh-mode
  :init
  (gcmh-mode 1))
#+end_src
** General
#+begin_src emacs-lisp
(use-package general
  :init
  (general-create-definer jackson/leader
    :prefix "C-c")
  (jackson/leader
    "qq" 'kill-emacs)
  (general-define-key
   "C-/" 'undo-only
   "C-?" 'undo-redo))
#+end_src
** Restart emacs
#+begin_src emacs-lisp
(use-package restart-emacs
  :general
  (jackson/leader
    "qr" 'restart-emacs
    "qR" 'restart-emacs))
#+end_src
** Which key
#+begin_src emacs-lisp
(use-package which-key
  :diminish
  :init (which-key-mode +1))
#+end_src
** Vertico
This is an alternative to selectrum/ivy/helm.
#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :init
  (vertico-mode))
;;(straight-use-package '(vertico :type git :host github :repo "minad/vertico" :commit "5b6d95f316425a533fa14e78732af26b22cf3b22"))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))
#+end_src
** Consult
#+begin_src emacs-lisp
(use-package consult
  :init
  (recentf-mode +1)
  (setq recentf-max-saved-items 200)
  (setq consult-preview-key (kbd "M-p"))
  :general
  (jackson/leader
    "fr" 'consult-recent-file
    "gd" 'consult-grep)
  ("C-s" 'consult-line)
  ("M-g M-g" 'consult-goto-line))
#+end_src
** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :init
  (marginalia-mode)
  :general
  (:keymaps 'minibuffer-local-map
	    "M-A" 'marginalia-cycle))
#+end_src
** Company
#+begin_src emacs-lisp
(use-package company
  :diminish
  :init
  (setq company-minimum-prefix-length 2)
  (setq company-dabbrev-downcase nil)
  (setq company-idle-delay nil)
  :hook
  (text-mode . company-mode)
  (prog-mode . company-mode)
  :general
  ("M-N" 'company-complete-common)
  (:keymaps 'company-active-map
	    "C-n" 'company-select-next
	    "C-p" 'company-select-previous))
#+end_src
** Corfu
This is an alternative to company. Use only one.
#+begin_src emacs-lisp :tangle no
(use-package corfu
  :config
  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since dabbrev can be used globally (M-/).
  :hook ((text-mode . corfu-mode)
	 (prog-mode . corfu-mode)
	 (eshell-mode . corfu-mode)
	 (term-mode . corfu-mode))
  :bind (("M-N" . completion-at-point)))

(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand)))
#+end_src
** Orderless
#+begin_src emacs-lisp
;; Use the `orderless' completion style.
;; Enable `partial-completion' for files to allow path expansion.
;; You may prefer to use `initials' instead of `partial-completion'.
(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
(defun company-yasnippet-or-completion ()
  (interactive)
  (let ((yas-fallback-behavior nil))
    (unless (yas-expand)
      (call-interactively #'company-complete-common))))

(use-package yasnippet
  :diminish (yas-minor-mode)
  :init
  (setq yas-triggers-in-field t)
  :hook
  (org-mode . (lambda()
		(yas-minor-mode +1)
		(yas-activate-extra-mode 'latex-mode)))
  (prog-mode . yas-minor-mode)
  (latex-mode . yas-minor-mode))

(use-package yasnippet-snippets
  :after yasnippet)
#+end_src
** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :init
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (setq flycheck-global-modes '(not emacs-lisp-mode latex-mode mips-mode org-mode magit-mode))
  (global-flycheck-mode))

(use-package flycheck-pos-tip
  :hook (flycheck-mode . flycheck-pos-tip-mode))
#+end_src
** Magit
#+begin_src emacs-lisp
(use-package magit)
#+end_src
* Language Packages and Configuration
** LSP mode
#+begin_src emacs-lisp
(use-package all-the-icons)

(use-package lsp-mode
  :init
  (setq lsp-log-io nil
	lsp-keymap-prefix "C-c l"
	lsp-ui-sideline-enable nil
	lsp-headerline-breadcrumb-enable nil
	lsp-enable-symbol-highlighting nil
	lsp-enable-indentation nil
	lsp-enable-on-type-formatting nil)
  :hook
  (lsp-mode . lsp-enable-which-key-integration)
  (js-mode . lsp-deferred)
  ;; (js-mode . (lambda ()
  ;;   	     (lsp-deferred)
  ;;   	     (setq-local lsp-diagnostics-provider :none)))
  ;; (typescript-mode . (lambda ()
  ;; 		       (lsp-deferred)
  ;; 		       (setq-local lsp-diagnostics-provider :none)))
  (typescript-mode . lsp-deferred)
  :commands (lsp lsp-deferred)
  :general
  (:keymaps 'lsp-mode-map
	    "M-." 'lsp-find-definition
	    "M-?" 'lsp-find-references))

#+end_src
** Treesitter
#+begin_src emacs-lisp
(use-package tree-sitter
  ;; :init (global-tree-sitter-mode)
  ;; :config
  ;; (add-hook 'js-mode-hook #'tree-sitter-hl-mode)
)
(use-package tree-sitter-langs)
#+end_src
** Formatting
#+begin_src emacs-lisp
(use-package prettier-js
  :init (setq prettier-js-show-errors nil)
  :general
  (:keymaps 'js-mode-map
	    "C-c c f" 'prettier-js))
#+end_src
** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode)
#+end_src
** Javascript/Typescript
#+begin_src emacs-lisp
(use-package json-mode)
(use-package typescript-mode
  :hook (typescript-mode . (lambda()
			     (setq-local indent-tabs-mode nil))))
#+end_src
** YAML
#+begin_src emacs-lisp
(use-package yaml-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src
** MIPS
#+begin_src emacs-lisp
(use-package mips-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.asm\\'" . mips-mode))
  :hook
  (mips-mode . (lambda()
		 (setq-local mips-operands-column 8
			     mips-operator-column 8
			     mips-comments-column 40))))
#+end_src
** Nix
#+begin_src emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
#+end_src
** C#
#+begin_src emacs-lisp
(use-package csharp-mode
  :hook csharp-mode . (lambda ()
			(setq-local indent-tabs-mode nil)))
#+end_src
* Themes/visual
Nord theme
#+begin_src emacs-lisp
(use-package nord-theme
  :config
  (load-theme 'nord))
#+end_src
* Extra packages/config
** Misc config
#+begin_src emacs-lisp
(use-package edit-indirect)
#+end_src

Below is functions which allow scaling up/down/reset font size globally.
#+begin_src emacs-lisp
(defun jackson/adjust-font-size (height)
  "Adjust font size by given height. If height is '0', reset font
  size. This function also handles icons and modeline font sizes."
  (interactive "nHeight ('0' to reset): ")
  (let ((new-height (if (zerop height)
			jackson/default-font-size
		      (+ height (face-attribute 'default :height)))))
    (set-face-attribute 'default nil :height new-height)
    (set-face-attribute 'mode-line nil :height new-height)
    (set-face-attribute 'mode-line-inactive nil :height new-height)
    (message "Font size: %s" new-height)))

(defun jackson/increase-font-size ()
  "Increase font size by 0.5 (5 in height)."
  (interactive)
  (jackson/adjust-font-size 5))

(defun jackson/decrease-font-size ()
  "Decrease font size by 0.5 (5 in height)."
  (interactive)
  (jackson/adjust-font-size -5))

(defun jackson/reset-font-size ()
  "Reset font size according to the `jackson/default-font-size'."
  (interactive)
  (jackson/adjust-font-size 0))

(general-define-key
 "C--" 'jackson/decrease-font-size
 "C-*" 'jackson/increase-font-size
 "C-0" 'jackson/reset-font-size)
#+end_src

These are for a slightly improved pdf experience when using DocView.
#+begin_src emacs-lisp
(setq revert-without-query '(".pdf"))
(setq doc-view-resolution 120)
(add-hook 'doc-view-mode-hook 'auto-revert-mode)
#+end_src

This package can be enabled to allow built in screenshotting.
#+begin_src emacs-lisp :tangle no
(straight-use-package '(screenshot :type git :host github :repo "tecosaur/screenshot"))
#+end_src

* Org settings
** General Org Config
#+begin_src emacs-lisp
(use-package org
  :init
  (setq org-catch-invisible-edits 'smart ;; Possibly better editing with folds
	org-special-ctrl-a/e t
	org-table-copy-increment nil ;; don't increment table on S-RET
	org-adapt-indentation nil
	org-src-preserve-indentation t
	org-src-tab-acts-natively t
	org-edit-src-content-indentation t)
  :config
  (setq org-directory "~/git_repos/emacs-org-mode"
	org-default-notes-file (concat org-directory "/.notes.org")
	org-agenda-files (directory-files-recursively org-directory "\\.org$")))
#+end_src
** Babel settings
#+begin_src emacs-lisp
;; BABEL LANGUAGES
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))
(push '("conf-unix" . conf-unix) org-src-lang-modes)

;; Automatically tangle config file when we save it
(defun jackson/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
		      (expand-file-name "~/.config/nixpkgs/configs/emacs/Minimal.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jackson/org-babel-tangle-config)))
#+end_src
