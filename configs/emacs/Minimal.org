#+title: Init.el Generator
#+property: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
#+startup: fold

* Core settings
Basic settings
#+begin_src emacs-lisp
    (setq user-full-name "Jackson Ludwig"
	  user-mail-address "jacksonludwig0@gmail.com")

    ;; Send backup files to tmp
    (setq backup-directory-alist
	  `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
	  `((".*" ,temporary-file-directory t)))

    ;; SAVE CUSTOM VARS TO SEPARATE FILE
    (setq custom-file (concat user-emacs-directory "custom.el"))
    (load custom-file 'noerror)

    (setq gc-cons-threshold 100000000)
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    (setq create-lockfiles nil)
#+end_src
* Sane UI Defaults
  #+begin_src emacs-lisp
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (setq visible-bell t)
  #+end_src
* Default settings and modes
  #+begin_src emacs-lisp
    (electric-pair-mode +1)
    (show-paren-mode +1)
    (setq js-indent-level 2)
    (setenv "BASH_ENV" "~/.bashrc")
  #+end_src
* Font
  #+begin_src emacs-lisp
    (defvar jackson/default-font-size 125)
    (defvar jackson/main-font "Jetbrains Mono")
    (defvar jackson/variable-font "DejaVu Sans")

    (set-face-attribute 'default nil :family jackson/main-font :height jackson/default-font-size)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil :family jackson/main-font :height 1.0)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil :family jackson/variable-font :height 1.0)
  #+end_src
* Package bootstrap
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
#+end_src
* Core Packages
** Diminish
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src
** General
   #+begin_src emacs-lisp
     (use-package general
       :init
       (general-create-definer jackson/leader
	 :prefix "C-c")
       (jackson/leader
	 "qq" 'kill-emacs)
       (general-define-key
	"C-?" 'undo-redo))
   #+end_src
** Restart emacs
#+begin_src emacs-lisp
  (use-package restart-emacs
    :general
    (jackson/leader
      "qr" 'restart-emacs
      "qR" 'restart-emacs))
#+end_src
** Evil mode
Currently disabled
   #+begin_src emacs-lisp :tangle no
     (use-package evil
       :init
       (setq evil-undo-system 'undo-redo)
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       (setq evil-want-C-u-scroll t)
       (setq evil-want-C-i-jump nil)
       (setq evil-disable-insert-state-bindings t) ;; use emacs binds instead of insert binds
       :config
       (general-evil-setup)
       (evil-mode 1)
       (evil-set-initial-state 'messages-buffer-mode 'normal))

     (use-package evil-org
       :after org
       :diminish evil-org-mode
       :hook (org-mode . evil-org-mode))
   #+end_src
** Which key
   #+begin_src emacs-lisp
     (use-package which-key
       :diminish
       :init (which-key-mode +1))
   #+end_src
** Selectrum
   #+begin_src emacs-lisp
     (use-package selectrum
       :init
       (selectrum-mode +1))

     (use-package selectrum-prescient
       :after selectrum
       :config
       (selectrum-prescient-mode +1)
       (prescient-persist-mode +1))
   #+end_src
** Consult
   #+begin_src emacs-lisp
     (use-package consult
       :init
       (recentf-mode +1)
       (setq recentf-max-saved-items 200)
       (setq consult-preview-key (kbd "M-p"))
       :general
       (jackson/leader
	 "fr" 'consult-recent-file)
       ("C-s" 'consult-line)
       ("M-g M-g" 'consult-goto-line))
   #+end_src
** Marginalia
   #+begin_src emacs-lisp
     (use-package marginalia
       :init
       (marginalia-mode)
       (advice-add #'marginalia-cycle :after
		   (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit 'keep-selected))))
       (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
       :general
       (:keymaps 'minibuffer-local-map
		 "M-A" 'marginalia-cycle))
   #+end_src
** Embark
   #+begin_src emacs-lisp
     (use-package embark
       :general
       (jackson/leader
	 "ea" 'embark-act
	 "eb" 'embark-bindings)
       :config
       ;; Hide the mode line of the Embark live/completions buffers
       (add-to-list 'display-buffer-alist
		    '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		      nil
		      (window-parameters (mode-line-format . none)))))

     (use-package embark-consult
       :after (embark consult)
       :demand t ; only necessary if you have the hook below
       ;; if you want to have consult previews as you move around an
       ;; auto-updating embark collect buffer
       :hook
       (embark-collect-mode . embark-consult-preview-minor-mode))
   #+end_src
** Company
   #+begin_src emacs-lisp
     (use-package company
       :diminish
       :init
       (setq company-minimum-prefix-length 2)
       (setq company-dabbrev-downcase nil)
       (setq company-idle-delay nil)
       :hook
       (text-mode . company-mode)
       (prog-mode . company-mode)
       :general
       ("M-n" 'company-complete-common)
       (:keymaps 'company-active-map
		 "C-n" 'company-select-next
		 "C-p" 'company-select-previous))
   #+end_src
** Yasnippet
   #+begin_src emacs-lisp
     (defun company-yasnippet-or-completion ()
       (interactive)
       (let ((yas-fallback-behavior nil))
	 (unless (yas-expand)
	   (call-interactively #'company-complete-common))))

     (use-package yasnippet
       :diminish (yas-minor-mode)
       :init
       (setq yas-triggers-in-field t)
       :hook
       (org-mode . (lambda()
		     (yas-minor-mode +1)
		     (yas-activate-extra-mode 'latex-mode)))
       (prog-mode . yas-minor-mode)
	;; (company-mode . (lambda() 
	;; 		    (substitute-key-definition 'company-complete-common
	;; 					       'company-yasnippet-or-completion
	;; 					       company-active-map)))
     )

     (use-package yasnippet-snippets
       :after yasnippet)
   #+end_src
** Flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :init
       (setq flycheck-check-syntax-automatically '(save mode-enabled))
       (setq flycheck-global-modes '(not emacs-lisp-mode))
       (global-flycheck-mode))
   #+end_src
* Language Packages and Configuration
** LSP mode
#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package lsp-mode
    :init
    (setq lsp-log-io nil
	  lsp-keymap-prefix "C-c l"
	  lsp-ui-sideline-enable nil
	  lsp-headerline-breadcrumb-enable nil
	  lsp-enable-symbol-highlighting nil
	  lsp-enable-indentation nil
	  lsp-enable-on-type-formatting nil)
    :hook
    (lsp-mode . lsp-enable-which-key-integration)
    (js-mode . lsp-deferred)
    ;; (js-mode . (lambda ()
    ;; 		       (lsp-deferred)
    ;; 		       (setq-local lsp-diagnostics-provider :none)))
    ;; (typescript-mode . (lambda ()
    ;; 		       (lsp-deferred)
    ;; 		       (setq-local lsp-diagnostics-provider :none)))
    (typescript-mode . lsp-deferred)
    :commands (lsp lsp-deferred)
    :general
    (:keymaps 'lsp-mode-map
	      "M-." 'lsp-find-definition
	      "M-?" 'lsp-find-references))
#+end_src
** Treesitter
Not used currently
#+begin_src emacs-lisp :tangle no
  (use-package tree-sitter)
  (use-package tree-sitter-langs
    :after tree-sitter
    :init
    (global-tree-sitter-mode)
    :config
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src
** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src
** Javascript/Typescript
Language basics.
#+begin_src emacs-lisp
  (use-package json-mode)
  (use-package typescript-mode)
#+end_src
** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src
* Themes/visual
#+begin_src emacs-lisp :tangle no
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-oceanic-next t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    (custom-set-faces
     '(org-block-end-line ((t (:background nil)))) ;; avoid bleeding when folded
     '(org-block-begin-line ((t (:background nil)))) ;; symmetry
     '(org-ellipsis ((t (:underline nil))))))
#+end_src
* Extra packages
#+begin_src emacs-lisp
  (use-package edit-indirect)
#+end_src
* Org settings
** General Org Config
#+begin_src emacs-lisp
  (use-package org
    :init
    (setq org-catch-invisible-edits 'smart ;; Possibly better editing with folds
	  org-special-ctrl-a/e t
	  org-table-copy-increment nil ;; don't increment table on S-RET
	  org-adapt-indentation nil)
    :config
    (setq org-directory "~/git_repos/emacs-org-mode"
	  org-agenda-files '("~/git_repos/emacs-org-mode/School.org" "~/git_repos/emacs-org-mode/Work.org")))
#+end_src
** Babel settings
#+begin_src emacs-lisp
  ;; BABEL LANGUAGES
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))
  (push '("conf-unix" . conf-unix) org-src-lang-modes)

  ;; Automatically tangle config file when we save it
  (defun jackson/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.config/nixpkgs/configs/emacs/Minimal.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jackson/org-babel-tangle-config)))
#+end_src
