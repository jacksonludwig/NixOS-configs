#+title: Init.el Config
#+property: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
#+startup: overview

* Global Settings
#+begin_src emacs-lisp
(setq user-full-name "Jackson Ludwig"
      user-mail-address "jacksonludwig0@gmail.com")

;; Send backup files to tmp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; Save custom vars to separate file
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file 'noerror)

(setq create-lockfiles nil) ; no lockfiles

(tool-bar-mode 0)
(scroll-bar-mode 0)
(menu-bar-mode 0)

(defvar jackson/default-font-size 120)
(defvar jackson/main-font "Roboto Mono")
(defvar jackson/variable-font "DejaVu Sans")
;; Set default face
(set-face-attribute 'default nil :family jackson/main-font :height jackson/default-font-size)
;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :family jackson/main-font :height 1.0)
;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :family jackson/variable-font :height 1.0)

(set-fringe-mode 18)                              ; larger fringes

(setq-default
 auto-window-vscroll nil                          ; Lighten vertical scroll
 confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
 fill-column 80                                   ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 indent-tabs-mode nil                             ; Stop using tabs to indent
 inhibit-startup-screen t                         ; Disable start-up screen
 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
 split-height-threshold nil                       ; Disable vertical window splitting
 split-width-threshold 1                          ; Disable horizontal window splitting
 tab-width 2                                      ; Set width for tabs
 window-combination-resize t                      ; Resize windows proportionally
 x-stretch-cursor t                               ; Stretch cursor to the glyph width
 scroll-step 1
 scroll-conservatively 10000)

(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n

(put 'downcase-region 'disabled nil)              ; Enable downcase-region
(put 'upcase-region 'disabled nil)                ; Enable upcase-region

(electric-pair-mode +1)
(show-paren-mode +1)
(global-subword-mode +1)

(add-hook 'help-mode-hook (lambda() (visual-line-mode)))
#+end_src

* General Packages
** Bootstrap
#+begin_src emacs-lisp
(setq straight-repository-branch "develop")
(setq straight-use-package-by-default t)
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)
#+end_src
** Diminish
#+begin_src emacs-lisp
(use-package diminish
  :config
  (diminish 'subword-mode))
#+end_src
** GCMH
#+begin_src emacs-lisp
(use-package gcmh
  :diminish gcmh-mode
  :init
  (gcmh-mode 1))
#+end_src
** Theme
#+begin_src emacs-lisp
(use-package nord-theme
  :config
  (load-theme 'nord))
#+end_src

Doom modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :init
  (setq lsp-modeline-diagnostics-enable nil)
  (setq doom-modeline-icon nil)
  :hook
  (after-init . doom-modeline-mode))
#+end_src

** General
#+begin_src emacs-lisp
(use-package general
  :init
  (general-create-definer jackson/leader
    :prefix "C-c")
  (general-define-key
   "C-/" 'undo-only
   "C-?" 'undo-redo))
#+end_src
** Magit
#+begin_src emacs-lisp
(use-package magit)
#+end_src
** Consult
#+begin_src emacs-lisp
(use-package consult
  :init
  (recentf-mode +1)
  (setq recentf-max-saved-items 200)
  (setq consult-preview-key (kbd "M-p"))
  :general
  (jackson/leader
    "fr" 'consult-recent-file
    "gd" 'consult-grep)
  ("C-s" 'consult-line)
  ("M-g M-g" 'consult-goto-line))
#+end_src
** Vertico
#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))
#+end_src
** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :init
  (marginalia-mode))
#+end_src
** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** Which key
#+begin_src emacs-lisp
(use-package which-key
  :diminish
  :config
  (which-key-mode))
#+end_src
** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :init
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (define-fringe-bitmap 'bitmap
    (vector #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00011100
            #b00111110
            #b00111110
            #b00111110
            #b00011100
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000))
  (flycheck-define-error-level 'error
    :severity 2
    :compilation-level 2
    :overlay-category 'flycheck-error-overlay
    :fringe-bitmap 'bitmap
    :fringe-face 'flycheck-fringe-error)
  (flycheck-define-error-level 'warning
    :severity 1
    :compilation-level 1
    :overlay-category 'flycheck-warning-overlay
    :fringe-bitmap 'bitmap
    :fringe-face 'flycheck-fringe-warning)
  (flycheck-define-error-level 'info
    :severity 0
    :compilation-level 0
    :overlay-category 'flycheck-info-overlay
    :fringe-bitmap 'bitmap
    :fringe-face 'flycheck-fringe-info))
  
(use-package flycheck-pos-tip
  :hook (flycheck-mode . flycheck-pos-tip-mode))
#+end_src
** Company
#+begin_src emacs-lisp
(use-package company
  :diminish
  :init
  (setq company-minimum-prefix-length 2)
  (setq company-dabbrev-downcase nil)
  (setq company-idle-delay nil)
  :hook
  (text-mode . company-mode)
  (prog-mode . company-mode)
  :general
  ("M-N" 'company-complete-common)
  (:keymaps 'company-active-map
	    "C-n" 'company-select-next
	    "C-p" 'company-select-previous))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet-snippets)

(use-package yasnippet
  :diminish (yas-minor-mode)
  :init
  (setq yas-triggers-in-field t)
  :hook
  (org-mode . (lambda()
		(yas-minor-mode +1)
		(yas-activate-extra-mode 'latex-mode)))
  (prog-mode . yas-minor-mode)
  (latex-mode . yas-minor-mode))
#+end_src
** LSP Mode
#+begin_src emacs-lisp
(use-package all-the-icons)

(use-package lsp-mode
  :init
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (setq lsp-keymap-prefix "C-c l")
  (setq lsp-log-io nil)
  (setq lsp-ui-sideline-enable nil
	      lsp-headerline-breadcrumb-enable nil
	      lsp-enable-symbol-highlighting nil
	      lsp-enable-indentation nil
	      lsp-enable-on-type-formatting nil)
  :hook
  (typescript-mode . lsp-deferred)
  (js-mode . lsp-deferred)
  :commands (lsp lsp-deferred)
  :general
  (:keymaps 'lsp-mode-map
	          "M-." 'lsp-find-definition
	          "M-?" 'lsp-find-references))
#+end_src
** Expand-Region
#+begin_src emacs-lisp
(use-package expand-region
  :general
  ("C-=" 'er/expand-region))
#+end_src
* Languages
** Typescript
#+begin_src emacs-lisp
(use-package typescript-mode
  :init
  (setq typescript-indent-level 2))
#+end_src
** Javascript
#+begin_src emacs-lisp
(setq js-indent-level 2)

(use-package rjsx-mode
  :mode "\\.js\\'"
  :hook (rjsx-mode . (lambda() (js2-mode-hide-warnings-and-errors))))
#+end_src

* Formatting
** JS/TS
#+begin_src emacs-lisp
(use-package prettier-js
  :init (setq prettier-js-show-errors nil)
  :general
  (:keymaps 'js-mode-map
	    "C-c c f" 'prettier-js)
  (:keymaps 'typescript-mode-map
	    "C-c c f" 'prettier-js))
#+end_src
* Org mode
#+begin_src emacs-lisp
(use-package org
  :init
  (setq org-startup-folded nil
	      org-hide-emphasis-markers nil
	      org-edit-src-content-indentation 0
	      org-src-tab-acts-natively t
	      org-src-fontify-natively t
        org-adapt-indentation nil
	      org-confirm-babel-evaluate nil
        org-special-ctrl-a/e t
	      org-support-shift-select 'always)
  :config
  (setq org-directory "~/git_repos/emacs-org-mode"
	      org-default-notes-file (concat org-directory "/.notes.org")
	      org-agenda-files (directory-files-recursively org-directory "\\.org$")))

;; BABEL LANGUAGES
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))
(push '("conf-unix" . conf-unix) org-src-lang-modes)

;; Automatically tangle config file when we save it
(defun jackson/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
		      (expand-file-name "~/.config/nixpkgs/configs/emacs/Mac.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jackson/org-babel-tangle-config)))
#+end_src
* Extras
** Font functions
#+begin_src emacs-lisp
(defun jackson/adjust-font-size (height)
  "Adjust font size by given height. If height is '0', reset font
  size. This function also handles icons and modeline font sizes."
  (interactive "nHeight ('0' to reset): ")
  (let ((new-height (if (zerop height)
			jackson/default-font-size
		      (+ height (face-attribute 'default :height)))))
    (set-face-attribute 'default nil :height new-height)
    (set-face-attribute 'mode-line nil :height new-height)
    (set-face-attribute 'mode-line-inactive nil :height new-height)
    (message "Font size: %s" new-height)))

(defun jackson/increase-font-size ()
  "Increase font size by 0.5 (5 in height)."
  (interactive)
  (jackson/adjust-font-size 5))

(defun jackson/decrease-font-size ()
  "Decrease font size by 0.5 (5 in height)."
  (interactive)
  (jackson/adjust-font-size -5))

(defun jackson/reset-font-size ()
  "Reset font size according to the `jackson/default-font-size'."
  (interactive)
  (jackson/adjust-font-size 0))

(defun jackson/set-big-font ()
  "Set font to a big size (1.5x the default)"
  (interactive)
  (let ((new-height (truncate (* jackson/default-font-size 1.5))))
    (message "Font size: %s" new-height)
    (set-face-attribute 'default nil :height new-height)
    (set-face-attribute 'mode-line nil :height new-height)
    (set-face-attribute 'mode-line-inactive nil :height new-height)))

(general-define-key
 "C--" 'jackson/decrease-font-size
 "C-*" 'jackson/increase-font-size
 "C-0" 'jackson/reset-font-size
 "C-c t b" 'jackson/set-big-font)
#+end_src
** PDF settings
#+begin_src emacs-lisp
(setq doc-view-resolution 120)
#+end_src
